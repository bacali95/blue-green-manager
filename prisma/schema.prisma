generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id                   String                   @id @default(uuid())
  ip                   String
  hostname             String
  status               AgentStatus
  version              String?
  lastSeenAt           DateTime?
  publicKey            String // base64 encoded public key
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  applications         Application[]
  healthChecks         HealthCheck[]
  commandExecutionLogs CommandExecutionLog[]
  refreshTokens        RefreshToken[]
  registrationTokens   AgentRegistrationToken[]
}

model Application {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  agentId      String
  agent        Agent         @relation(fields: [agentId], references: [id])
  services     Service[]
  deployments  Deployment[]
  healthChecks HealthCheck[]
}

model Service {
  id            String      @id @default(uuid())
  name          String
  image         String
  hostname      String
  restart       String
  environment   Json?
  ports         String[]
  volumes       String[]
  dependsOn     String[]
  healthCheck   Json?
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
}

model Deployment {
  id                   String                @id @default(uuid())
  version              String
  status               DeploymentStatus
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deployedAt           DateTime?
  rolledBackAt         DateTime?
  variables            Json?
  applicationId        String
  application          Application           @relation(fields: [applicationId], references: [id])
  commandExecutionLogs CommandExecutionLog[]
  extraFiles           DeploymentExtraFile[]
}

model DeploymentExtraFile {
  deploymentId String
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  fileId       String
  file         File       @relation(fields: [fileId], references: [id], onUpdate: Restrict)

  @@id([deploymentId, fileId])
  @@index([deploymentId])
  @@index([fileId])
}

model HealthCheck {
  id            String      @id @default(uuid())
  success       Boolean
  message       String?
  checkedAt     DateTime    @default(now())
  agentId       String
  agent         Agent       @relation(fields: [agentId], references: [id])
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
}

model CommandExecutionLog {
  id           String        @id @default(uuid())
  status       CommandStatus @default(QUEUED)
  stdout       String?
  stderr       String?
  duration     Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  executedAt   DateTime?
  agentId      String
  agent        Agent         @relation(fields: [agentId], references: [id])
  deploymentId String
  deployment   Deployment    @relation(fields: [deploymentId], references: [id])
}

model AgentRegistrationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
}

model File {
  id                   String                @id @default(uuid())
  name                 String
  content              String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deploymentExtraFiles DeploymentExtraFile[]
}

enum DeploymentStatus {
  PENDING
  ACTIVE
  FAILED
  ROLLED_BACK
  STOPPED
}

enum AgentStatus {
  ONLINE
  OFFLINE
  DEGRADED
  MAINTENANCE
}

enum CommandStatus {
  QUEUED
  SENT
  RUNNING
  SUCCESS
  FAILED
  TIMEOUT
}
